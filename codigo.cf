  comment "//" ;
  comment "/*" "*/" ;
  
  Prog. Program  ::= [Decl] [Stm] [Function] ;
  Fun.  Function ::= "function" Ident "(" [Stm] ")" "{" [Stm] "}" ;
  Dec.  Decl     ::= Type [Ident] ;

  terminator Function "" ;
  terminator Stm "" ;
  separator  Decl "," ;
  separator  nonempty Ident "," ;
  
  SDecl.       Stm ::= Decl ";"  ;
  SExp.        Stm ::= Exp ";" ;
  SBlock.      Stm ::= "{" [Stm] "}" ;
  SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
  SFor.        Stm ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm ;
  SIf.         Stm ::= "if" "(" Exp ")" "{" [Stm] "}" ; 
  SIfelse.     Stm ::= "if" "(" Exp ")" "{" [Stm] "}" "else" "{" [Stm] "}" ;
  SReturn.     Stm ::= "return" Exp  ";" ;
  SLabel.      Stm ::= Integer ":" ;
  SGoto.       Stm ::= "goto" Integer ";" ;
  SLog.        Stm ::= "log" "(" Exp ")" ";" ;
  SInterface.  Stm ::= "interface" Ident "{" [Exp] "}" ";" ;

  EAss.               Exp  ::= "let" Ident ":" Type "=" Exp ;
  EIdent.             Exp ::= Ident ;
  EAssSimpl.          Exp  ::= Ident "=" Exp ;
  EConst.             Exp  ::= "const" Ident ":" Type "=" Exp ;
  EPontMem.           Exp  ::= "let" Typont Ident  "=" "&" Exp ;
  EPont.              Exp ::= "let" Typont Ident "=" Exp ;
  EAssArray.          Exp ::= "let" Ident ":" Type "[]" "=" "[" [Exp] "]";
  EAssArraySim.       Exp ::= Ident "[" Exp "]" "=" Exp ;
  EAPositionInArray.  Exp ::= Ident "[" Integer "]" "=" Ident "[" Integer "]" ;
  EMinor.             Exp1 ::= Ident "[" Exp "]" "!==" Exp4 ;
  EVequal.            Exp1 ::= Ident "[" Exp "]" "==" Exp4 ;
  EVatri.             Exp1 ::= Ident "[" Ident "]" "=" Exp4 ;
  EAnotherArrayIndex. Exp ::= Ident "[" Exp "]" "=" Ident "[" Exp "]" ;
  EAssMatrix.         Exp ::= "let" Ident ":" Type "[][]" "=" "[" [Exp] "]" ;
  EAssMatrixOp.       Exp ::= "let" Ident ":" Type "[][]" "=" Exp ;
  EAssInterface.      Exp ::= "let" Ident ":" Type "=" "{" [Exp] "}" ;
  EkeyDecl.           Exp ::= Ident ":" Type ;
  EkeyDeclObj.        Exp ::= Ident ":" Exp4 ;
  ELt.                Exp1 ::= Exp2 "<" Exp2 ;
  Equal.              Exp1 ::= Exp2 "==" Exp2 ;
  EDiff.              Exp1 ::= Exp2 "!==" Exp2 ;

  EAdd.    Exp2 ::= Exp2 "+" Exp3 ;
  ESub.    Exp2 ::= Exp2 "-" Exp3 ;
  EMul.    Exp3 ::= Exp3 "*" Exp4 ;
  Call.    Exp4 ::= Ident "(" [Exp] ")" ;
  EVar.    Exp4 ::= Ident ;
  EStr.    Exp4 ::= String ;
  EInt.    Exp4 ::= Integer ;
  EChar.   Exp4 ::= Char ;
  EDouble. Exp4 ::= Double ;
  EVet.    Exp4 ::= Ident "[" Ident "]" ;
  EIncr.   Exp ::= Exp "++" ";" ;
  EDecr.   Exp ::= Exp "--" ";" ;

  EIncrWithoutemicolon.  Exp ::= Ident "++" ;
  EDecrWithoutemicolon.  Exp ::= Ident "--" ;
  
  coercions Exp 4 ;
  
  separator Exp "," ;

  ExpList. Exp ::= "[" [Exp] "]" ;

  rules Type ::= Type "[" Integer "]" | "int" | "[" String "]" | "string" | "float" | "double" | "char" | "interface" | Ident ;

  TPonterio.  Typont ::= "@" ;
